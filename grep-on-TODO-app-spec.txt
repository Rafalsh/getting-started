----------
General

When there are no todos, #main and #footer should be hidden.

TODO -- General -- Almost done for hiding #main and #footer, but there should be a little spacing above the input when it exists by itself. Do these references to #main and #footer need to be in the html as anchors, or are these just references?
----------


----------
Readme

All examples should include a short README describing the framework, the general implementation and the build process if required.

TODO -- Readme -- Write it when dust settles. If fixtures is not used in the todomvc rendition of SproutCore todos, take note. And also, link to SproutCore's Getting-Started guides and the todos app there.
---------


----------
UX

To make it easy to compare frameworks, the app should look and behave exactly like the template and the other examples.

TODO -- UX -- This general requirement, that it work like the template, will be done when all the items in the spec are completed, to the extent appropriate for SproutCore.
----------


----------
Compatibility

We require apps to work in every browser we support.

TODO -- Compatibility -- Check the list of required browsers to support, and ask devs.
----------


----------
Structure

Recommended file structure:

index.html
bower.json
bower_components/
css
└── app.css
js/
├── app.js
├── controllers/
└── models/
Try to follow this structure as close a possible while still keeping to the frameworks best practices.

Components should be split up into separate files and placed into folders where it makes the most sense.

Example:

js/
├── app.js
├── controllers/
│   └── todos.js
└── models/
    └── todo.js
Keep in mind that framework best practices on how to structure your app comes first.

NOT APPLICABLE (Use SproutCore's best practices for app structure, which is already similar to todomvc.)
TODO -- Structure -- The bower_components directory contains base.css, base.js, bg.png. Do we need to use these?
TODO -- Structure -- In the template, an app.css overrides bower_components/base.css. Worry about?
----------


----------
Code

Please try to keep the HTML as close to the template as possible. Remove the comments from the HTML when done. The base.css file should be referenced from the assets folder and not be touched. If you need to change some styles, use the app.css file, but try to keep it to a minimum. Remember to update the relative paths when using the template.

TODO -- Code -- Same question from Structure section about use of base.css and app.css.
----------


----------
Make sure to follow these:

Follow our code style
Use double-quotes in HTML and single-quotes in JS and CSS.
Use bower components for your third-party dependencies and manually remove files that aren't required for your app to run.
Use a constant instead of the keyCode directly: var ENTER_KEY = 13;

DONE -- Code Style -- Edited files for using tabs. Fixed use of double vs.
single quotes. We are assuming here that we will not use bower at all. SproutCore uses constants internally.
----------


----------
Dependency Management

Unless it conflicts with the project's best practices, your example should use bower for package management. Specify your dependencies in a bower.json file in the root directory of your app. The name of the component must follow the schema todomvc-[framework] and must include todomvc-common as dependency. An example bower.json could look like this:

{
  "name": "todomvc-sample",
  "version": "0.0.0",
  "dependencies": {
    "underscore": "~1.4.4",
    "jquery": "~1.9.1",
    "todomvc-common": "~0.1.0"
  }
}
The files in bower_components/ should be limited to the files actually used by your example. That means documentation, READMEs and tests should not be included in the pull request.

NOT APPLICABLE -- SproutCore's build tools handle all this.
----------


----------
Persistence

Your app should dynamically persist the todos to localStorage. If the framework has capabilities for persisting data (i.e. Backbone.sync), use that, otherwise vanilla localStorage. If possible, use the keys id, title, completed for each item. Make sure to use this format for the localStorage name: todos-[framework]. Editing mode should not be persisted.

TODO -- Persistence -- Use SproutCore's local storage. Is it important to showcase SproutCore's fixtures, with example todos loaded initially? Or, just remove fixtures altogether and initial app load has no todos?
----------


----------
Routing

Routing is required for all frameworks. Use the built-in capabilities if supported, otherwise use the Flatiron Director routing library located in the /assets folder. The following routes should be implemented: #/ (all - default), #/active and #/completed (#!/ is also allowed). When the route changes the todo list should be filtered on a model level and the selected class on the filter links should be toggled. When an item is updated while in a filtered state, it should be updated accordingly. E.g. if the filter is Active and the item is checked, it should be hidden. Make sure the active filter is persisted on reload.

TODO -- Routing -- Use SproutCore's routing for #/, #/active, #/completed, and do required filtering and displays.
----------


----------
New todo

New todos are entered in the input at the top of the app. Pressing Enter creates the todo, appends it to the todo list and clears the input. Make sure to .trim() the input and then check that it's not empty before creating a new todo.

DONE
----------


----------
Mark all as complete

This checkbox toggles all the todos to the same state as itself. Make sure to clear the checked state after the the "Clear completed" button is clicked. The "Mark all as complete" checkbox should also be updated when single todo items are checked/unchecked. Eg. When all the todos are checked it should also get checked.

DONE
----------


----------
Item

A todo item has three possible interactions:

Clicking the checkbox marks the todo as complete by updating it's completed value and toggling the class completed on it's parent <li>
DONE

Double-clicking the <label> activates editing mode, by toggling the .editing class on it's <li>
TODO -- Item -- Add an item edit state to handle editing on double-click.

Hovering over the todo shows the remove button (.destroy)
TODO -- Item -- Add an "X" icon and button that should appear on hovering over a todo item.
----------


----------
Editing

When editing mode is activated it will hide the other controls and bring forward an input that contains the todo title, which should be focused (.focus()). The edit should be saved on both blur and enter, and the editing class should be removed. Make sure to .trim() the input and then check that it's not empty. If it's empty the todo should instead be destroyed. If escape is pressed during the edit, the edit state should be left and any changes be discarded.

TODO -- Editing -- The new editing state (to be added for a separate todo) should hide other controls, destroy if empty input, discard on escape. Find out about blur vs. enter.
----------


----------
Counter

Displays the number of active todos in a pluralized form. Make sure the number is wrapped by a <strong> tag. Also make sure to pluralize the item word correctly: 0 items, 1 item, 2 items. Example: 2 items left

TODO -- Counter -- Add a label to the todos counter (1 item left, singular, and 2 items left, plural). Check on <strong> tag around Counter number.
----------


----------
Clear completed button

Displays the number of completed todos, and when clicked, removes them. Should be hidden when there are no completed todos.

DONE
----------
